
Symulacja.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000198  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000198  0000020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000240  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000929  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000679  00000000  00000000  00000bfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000360  00000000  00000000  00001276  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000015d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033a  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002c5  00000000  00000000  00001996  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001c5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e9       	ldi	r30, 0x98	; 152
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c3 00 	call	0x186	; 0x186 <main>
  7a:	0c 94 ca 00 	jmp	0x194	; 0x194 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_command>:
#include "LCD.h"
#include <util/delay.h>
#include <avr/io.h>
void LCD_command(unsigned char cmd)
{
	LCD_PORT &= ~(1<<RS);
  82:	98 b3       	in	r25, 0x18	; 24
  84:	9e 7f       	andi	r25, 0xFE	; 254
  86:	98 bb       	out	0x18, r25	; 24
	LCD_PORT = (LCD_PORT & 0x0F) | (cmd & 0xF0);
  88:	98 b3       	in	r25, 0x18	; 24
  8a:	9f 70       	andi	r25, 0x0F	; 15
  8c:	28 2f       	mov	r18, r24
  8e:	20 7f       	andi	r18, 0xF0	; 240
  90:	92 2b       	or	r25, r18
  92:	98 bb       	out	0x18, r25	; 24
	LCD_PORT |= (1<<E);
  94:	98 b3       	in	r25, 0x18	; 24
  96:	92 60       	ori	r25, 0x02	; 2
  98:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	3a e0       	ldi	r19, 0x0A	; 10
  9c:	3a 95       	dec	r19
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_command+0x1a>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_command+0x20>
	_delay_us(2);
	LCD_PORT &= ~(1<<E);
  a2:	98 b3       	in	r25, 0x18	; 24
  a4:	9d 7f       	andi	r25, 0xFD	; 253
  a6:	98 bb       	out	0x18, r25	; 24
  a8:	9a e6       	ldi	r25, 0x6A	; 106
  aa:	9a 95       	dec	r25
  ac:	f1 f7       	brne	.-4      	; 0xaa <LCD_command+0x28>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <LCD_command+0x2e>
	
	_delay_us(20);
	LCD_PORT = (LCD_PORT & 0x0F) | (cmd<<4);
  b0:	28 b3       	in	r18, 0x18	; 24
  b2:	30 e1       	ldi	r19, 0x10	; 16
  b4:	83 9f       	mul	r24, r19
  b6:	c0 01       	movw	r24, r0
  b8:	11 24       	eor	r1, r1
  ba:	92 2f       	mov	r25, r18
  bc:	9f 70       	andi	r25, 0x0F	; 15
  be:	89 2b       	or	r24, r25
  c0:	88 bb       	out	0x18, r24	; 24
	LCD_PORT |= (1<<E);
  c2:	88 b3       	in	r24, 0x18	; 24
  c4:	82 60       	ori	r24, 0x02	; 2
  c6:	88 bb       	out	0x18, r24	; 24
  c8:	8a e0       	ldi	r24, 0x0A	; 10
  ca:	8a 95       	dec	r24
  cc:	f1 f7       	brne	.-4      	; 0xca <LCD_command+0x48>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <LCD_command+0x4e>
	_delay_us(2);
	LCD_PORT &= ~(1<<E);
  d0:	88 b3       	in	r24, 0x18	; 24
  d2:	8d 7f       	andi	r24, 0xFD	; 253
  d4:	88 bb       	out	0x18, r24	; 24
  d6:	87 ec       	ldi	r24, 0xC7	; 199
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <LCD_command+0x58>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <LCD_command+0x5e>
  e0:	00 00       	nop
  e2:	08 95       	ret

000000e4 <LCD_data>:
	
}

void LCD_data(unsigned char data)
{
	LCD_PORT |= (1<<RS);
  e4:	98 b3       	in	r25, 0x18	; 24
  e6:	91 60       	ori	r25, 0x01	; 1
  e8:	98 bb       	out	0x18, r25	; 24
	LCD_PORT |= (1<<E);
  ea:	98 b3       	in	r25, 0x18	; 24
  ec:	92 60       	ori	r25, 0x02	; 2
  ee:	98 bb       	out	0x18, r25	; 24
	LCD_PORT = (LCD_PORT & 0x0F) | (data & 0xF0);
  f0:	98 b3       	in	r25, 0x18	; 24
  f2:	9f 70       	andi	r25, 0x0F	; 15
  f4:	28 2f       	mov	r18, r24
  f6:	20 7f       	andi	r18, 0xF0	; 240
  f8:	92 2b       	or	r25, r18
  fa:	98 bb       	out	0x18, r25	; 24
  fc:	3a e0       	ldi	r19, 0x0A	; 10
  fe:	3a 95       	dec	r19
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_data+0x1a>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_data+0x20>
	_delay_us(2);
	LCD_PORT &= ~(1<<E);
 104:	98 b3       	in	r25, 0x18	; 24
 106:	9d 7f       	andi	r25, 0xFD	; 253
 108:	98 bb       	out	0x18, r25	; 24
 10a:	9a e6       	ldi	r25, 0x6A	; 106
 10c:	9a 95       	dec	r25
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCD_data+0x28>
 110:	00 c0       	rjmp	.+0      	; 0x112 <LCD_data+0x2e>
	
	_delay_us(20);
	LCD_PORT = (LCD_PORT & 0x0F) | (data<<4);
 112:	28 b3       	in	r18, 0x18	; 24
 114:	30 e1       	ldi	r19, 0x10	; 16
 116:	83 9f       	mul	r24, r19
 118:	c0 01       	movw	r24, r0
 11a:	11 24       	eor	r1, r1
 11c:	92 2f       	mov	r25, r18
 11e:	9f 70       	andi	r25, 0x0F	; 15
 120:	89 2b       	or	r24, r25
 122:	88 bb       	out	0x18, r24	; 24
	LCD_PORT |= (1<<E);
 124:	88 b3       	in	r24, 0x18	; 24
 126:	82 60       	ori	r24, 0x02	; 2
 128:	88 bb       	out	0x18, r24	; 24
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	8a 95       	dec	r24
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_data+0x48>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_data+0x4e>
	_delay_us(2);
	LCD_PORT &= ~(1<<E);
 132:	88 b3       	in	r24, 0x18	; 24
 134:	8d 7f       	andi	r24, 0xFD	; 253
 136:	88 bb       	out	0x18, r24	; 24
 138:	87 ec       	ldi	r24, 0xC7	; 199
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <LCD_data+0x58>
 140:	00 c0       	rjmp	.+0      	; 0x142 <LCD_data+0x5e>
 142:	00 00       	nop
 144:	08 95       	ret

00000146 <LCD_text>:
	_delay_us(50);
}

void LCD_text(const char* text)
{
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
 14a:	ec 01       	movw	r28, r24
	while (*text)
 14c:	03 c0       	rjmp	.+6      	; 0x154 <LCD_text+0xe>
		LCD_data(*text++);
 14e:	21 96       	adiw	r28, 0x01	; 1
 150:	0e 94 72 00 	call	0xe4	; 0xe4 <LCD_data>
	_delay_us(50);
}

void LCD_text(const char* text)
{
	while (*text)
 154:	88 81       	ld	r24, Y
 156:	81 11       	cpse	r24, r1
 158:	fa cf       	rjmp	.-12     	; 0x14e <LCD_text+0x8>
		LCD_data(*text++);
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <LCD_init>:

void LCD_init()
{
	LCD_DDR = 0xFF; //output
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	87 bb       	out	0x17, r24	; 23
	LCD_PORT = 0x00; //RS = 0, E = 0;
 164:	18 ba       	out	0x18, r1	; 24
	LCD_command(0x02);
 166:	82 e0       	ldi	r24, 0x02	; 2
 168:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_command(0x28);
 16c:	88 e2       	ldi	r24, 0x28	; 40
 16e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_command(0x01);
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_command(0x0F);
 178:	8f e0       	ldi	r24, 0x0F	; 15
 17a:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
	LCD_command(0x06);
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	0e 94 41 00 	call	0x82	; 0x82 <LCD_command>
 184:	08 95       	ret

00000186 <main>:
#include "LCD.h"


int main(void)
{
    LCD_init();
 186:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_init>
    LCD_text("abc");
 18a:	80 e6       	ldi	r24, 0x60	; 96
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 a3 00 	call	0x146	; 0x146 <LCD_text>
 192:	ff cf       	rjmp	.-2      	; 0x192 <main+0xc>

00000194 <_exit>:
 194:	f8 94       	cli

00000196 <__stop_program>:
 196:	ff cf       	rjmp	.-2      	; 0x196 <__stop_program>
